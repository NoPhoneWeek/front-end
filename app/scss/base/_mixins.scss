//Mixins
@mixin three-d($shadowcolor){
	position: relative;
	box-shadow: 1px 1px $shadowcolor, 2px 2px $shadowcolor, 3px 3px $shadowcolor;
	transition: all 0.1s ease-in;
	&:active{
		box-shadow: none;
		top: 3px;
		left: 3px;
	}
}

@mixin font-face($family, $path, $svg, $weight: normal, $style: normal){
	@font-face{
		font-family: $family;
		src: url('#{$path}.eot');
		src: url('#{$path}.eot?#iefix') format('embedded-opentype'),
			 url('#{$path}.woff') format('woff'), url('#{$path}.ttf') format('truetype'),
			 url('#{$path}.svg##{$svg}') format('svg');
		font-weight: $weight;
		font-style: $style;
	}
}

// Makes Ellipsis on Single Line
@mixin ellipsis-line($width){
	width: $width;
	text-overflow: ellipsis;
	overflow: hidden;
	white-space: nowrap;
}
// GrayScale Filter
@mixin grayscale($level){
	-webkit-filter: grayscale($level);
	filter: grayscale($level);
}

@mixin clearfixable(){
  &:after, &:before{
    content: " ";
    display: table;
  }
  &:after{
    clear: both;
  }
}

@mixin socle(){
	position: relative;
	z-index: 2;
	&:after{
		content: "";
		z-index: -1;
		position: absolute;
		border-radius: 6px;
		box-shadow: inset 0 1px 0 rgba(0,0,0,0.1), inset 0 -1px 0 rgba(255,255,255,0.7);
		top: -6px;
		bottom: -6px;
		right: -6px;
		left: -6px;
		background: linear-gradient(rgba(0,0,0,0.1), rgba(0,0,0,0));
	}
}
// Gradients
@mixin gradient-dark-linear{
	background-image: -webkit-linear-gradient(rgba(0,0,0,.25), rgba(0,0,0,0));
	background-image: -o-linear-gradient(rgba(0,0,0,.25), rgba(0,0,0,0));
	background-image: linear-gradient(rgba(0,0,0,.25), rgba(0,0,0,0));
}
@mixin gradient-light-linear{
	background-image: -webkit-linear-gradient(rgba(255,255,255,.5), rgba(255,255,255,0));
	background-image: -o-linear-gradient(rgba(255,255,255,.5), rgba(255,255,255,0));
	background-image: linear-gradient(rgba(255,255,255,.5), rgba(255,255,255,0));
}
@mixin gradient-dark-radial{
	background-image: radial-gradient(center 0, circle farthest-corner, rgba(0,0,0,0.15), rgba(0,0,0,0));
}
@mixin gradient-light-radial{
	background-image: radial-gradient(center 0, circle farthest-corner, rgba(255,255,255,0.4), rgba(255,255,255,0));
}
@mixin print($map) {
  @each $property, $value in $map {
    #{$property}: $value
  }
}
@mixin prefix($property, $value, $prefixes) {
	@each $prefix in $prefixes {
		#{$prefix}-#{$property}:$value;
	}
	#{$property}:$value;
}
@mixin stitches($color){
   padding: 20px;
   margin: 10px;
   background: $color;
   color: #fff;
   font-size: 21px;
   font-weight: normal;
   line-height: 1.3em;
   border: 2px dashed #fff;
   border-radius: 10px;
   box-shadow: 0 0 0 4px $color, 2px 1px 6px 4px rgba(10, 10, 0, 0.5);
   text-shadow: -1px -1px #aa3030;
}
@mixin ir($image, $width, $height){
  border: 0;
  font: 0/0 a;
  text-shadow: none;
  color: transparent;
  background: url($image);
  width: $width;
  height: $height;
}
@mixin breakpoint($value){
	@media only screen and (min-width: $value){
		@content;
	}
}
// Magic parallax mixins
@mixin parallax-init($perspective: null, $element: null, $parallax-ios: null) {

  $perspective: if($perspective != null, $perspective, toolkit-get('parallax perspective'));
  $element: if($element != null, $element, toolkit-get('parallax element'));
  $parallax-ios: if($parallax-ios != null, $parallax-ios, toolkit-get('parallax ios'));

  @if $element == 'body' {
    @at-root {
      html, body {
        width: 100%;
        height: 100%;
        margin: 0;
        padding: 0;
        overflow: hidden;
      }
      body {
        @include parallax-init-core($perspective, $parallax-ios);
      }
    }
  }
  @else {
    @if $element == this {
      @include parallax-init-core($perspective, $parallax-ios);
    }
    @else {
      @at-root #{$element} {
        @include parallax-init-core($perspective, $parallax-ios);
      }
    }
  }
}

@mixin parallax-init-core($perspective: null, $parallax-ios: null) {
  $perspective: if($perspective != null, $perspective, toolkit-get('parallax perspective'));
  $parallax-ios: if($parallax-ios != null, $parallax-ios, toolkit-get('parallax ios'));

  overflow: auto;
  @if mixin-exists(perspective) {
    @include perspective($perspective * 1px);
  }
  @else {
    -webkit-perspective: $perspective * 1px;
    perspective: $perspective * 1px;
  }
  // Allows for smooth scrolling but disables parallax effects.
  @if $parallax-ios == false {
    -webkit-overflow-scrolling: touch;
  }
  // Make sure 3D perspective is preserved
  &, & * {
    @if mixin-exists(transform-style) {
      @include transform-style(preserve-3d);
    }
    @else {
      -webkit-transform-style: preserve-3d;
      transform-style: preserve-3d;
    }
  }
}

@mixin parallax($distance: null, $perspective: null) {

  $distance: if($distance != null, $distance, toolkit-get('parallax distance'));
  $perspective: if($perspective != null, $perspective, toolkit-get('parallax perspective'));

  $transform: translateZ($distance * $perspective * 1px) scale(abs($distance - 1));

  @if mixin-exists(transform) {
    @include transform($transform);
  }
  @else {
    -webkit-transform: $transform;
    transform: $transform;
  }

  z-index: $distance * 100;
}

@mixin tinted-bg($overlay-color, $alpha-level, $image, $size: normal){
  background: linear-gradient(rgba($overlay-color, $alpha-level), rgba($overlay-color, $alpha-level)), url($image);
  background-size: $size;
}

@mixin button-hover($bgcolor){
  &:hover{
    background: darken($bgcolor, 5%);
  }
}

